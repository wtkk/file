  <template>
     <div class="wrap">
      <div id="box">
         <div id="marquee">{{text}}</div>
         <div id="copy" style="display: none;margin-top: -5px"></div>
     </div>
    <div id="node">{{text}}</div>
  </div>
</template>

     <script type="text/ecmascript-6">
      export default {
      name:'Scroller',
      props: ['lists'], // 父组件传入数据， 数组形式 [ "连雨不知春去"，"一晴方觉夏深"]
     data () {
        return {
           text: '' // 数组文字转化后的字符串
                 }
              },
      methods: {
          move () {
          // 获取文字text 的计算后宽度  （由于overflow的存在，直接获取不到，需要独立的node计算）
           let width = document.getElementById('node').getBoundingClientRect().width
          let box = document.getElementById('box')
         let copy = document.getElementById('copy')
         copy.innerText = this.text // 文字副本填充
         let distance = 10 // 位移距离
         // 设置位移
        setInterval(function () {
        distance = distance - 1
       // 如果位移超过文字宽度，则回到起点
        if (-distance >= width) {
        distance = 16
       }
        box.style.transform = 'translateX(' + distance + 'px)'
      }, 40)
    }
  },
     // 把父组件传入的arr转化成字符串
      mounted: function () {
       for (let i = 0; i < this.lists.length; i++) {
         this.text += ' ' + this.lists[i]
          }
     },
     // 更新的时候运动
       updated: function () {
         this.move()
     }
  }
</script>

 <style scoped>
/*样式的话可以写*/
  .wrap {
overflow: hidden;
color: #005bbe;
     }
 #box {
/*width: 80%;*/
height: 100%;
 }
 #box div {
float: left;
 }
 #marquee {
margin: -5px 16px 0 20px;
}
#node {
position: absolute;
z-index: -99;
top: -99px;
}
</style>


  <template>
     <div class="aa">
       <Scroller :lists="lists" class="scrollContainer left" />
     </div>
</template>
     <script type="text/ecmascript-6">
      export default {
      components: {Scroller},
      props: ['lists'], // 父组件传入数据， 数组形式 [ "aaaa"，"bbbbb"]
       data () {
        return {
         lists:['欢迎大家来一起学习'],
                 }
              }
        }
</script>
  <style scoped>
   /*样式的话可以写*/
.scrollContainer {
color: #ffffff;
font-size: 16px;
margin-left: 10px;
width:79%;
height: 30px;
line-height: 30px;
overflow: hidden;
 }
</style>










<template>
  <div class="leftTopBox">
    <div id="demo">
      <div class="nwwest-roll" id="nwwest-roll">
        <ul id="roll-ul" class="roll-ul">
          <li
            v-for="(item, index) in valList"
            ref="rollul"
            :class="{ anim: anim == true }"
            :key="index"
          >
            <span class="name">{{ item }}</span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      valList: [0, 0],
      anim: true
    }
  },
  props: {
    valNum: {
      type: Number
    }
  },
  // 如果使用serverData传过来的静态数据 请使用mounted()方法 并注释掉watch
  mounted() {},
  watch: {
    valNum(newV, oldV) {
      this.valList = [newV, oldV]
      setTimeout(() => {
        this.scroll(this.$refs.rollul)
      }, 50)
    }
  },
  methods: {
    scroll(el, type) {
      //字体动画
      //   console.log(el, type)
      el[0].style.marginTop = '-50px' // 按字体盒子大小来设置
      this.anim = !this.anim
      var that = this
      setTimeout(function() {
        el[0].style.marginTop = '0px'
        that.anim = !that.anim
      }, 10)
    }
  }
}
</script>
<style lang="scss" scoped>
.leftTopBox {
  width: 50%;
  .nwwest-roll {
    font-size: 40px;
    height: 50px;
    line-height: 50px;
    overflow: hidden;
  }

  .roll-ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .nwwest-roll li {
    height: 50px;
    line-height: 50px;
  }

  .anim {
    transition: all 1.5s;
  }
}
</style>